Image Manipulation Application Overview

This project implements an image manipulation application that enables loading images, selecting areas, applying transformations (rotations, crop, filters), and saving the resulting files. The code is modular, with each operation managed by a specific function.

Data Structures

pixel: Represents each pixel in the image. For color images, stores RGB components (r, g, b). For grayscale images, stores brightness (l).

image: Represents the entire image, containing:

pixels: matrix of pixels

width, height: image dimensions

max_val: maximum pixel value

format: image format (ASCII or binary)

x1, y1, x2, y2: selected area coordinates

Functional Breakdown

Loading Images (LOAD)

Loads images in ASCII (P2, P3) or binary (P5, P6) formats.

Reads sequentially: format, dimensions, max pixel value, pixel matrix.

Grayscale pixel brightness stored in l; color pixels use r, g, b.

Differentiates file type by header and processes accordingly.

Selecting Areas (SELECT)

select_area selects a sub-area using coordinates (x1, y1, x2, y2).

Validates coordinates within image bounds.

Automatically corrects reversed coordinate order.

select_all selects the entire image by setting coordinates to full extent.

Crop (CROP)

Removes pixels outside the selected area.

Allocates a new pixel matrix for the selected zone.

Frees old matrix to avoid memory leaks.

Updates coordinates to reflect new image size.

Rotating Images (ROTATE)

Rotates full image or selected area by 90, 180, or 270 degrees.

Negative angles made positive by adding 360; angles modulo 360.

Rotation allowed only if selection is square.

Rotation handled by:

0째: no change

90째: pixel (i, j) from [new_w - j - 1][i]

180째: pixel (i, j) from [new_h - i - 1][new_w - j - 1]

270째: pixel (i, j) from [j][new_h - i - 1]

Uses rotate_full and rotate_select functions for entire image or selection.

Applying Filters (APPLY)

Applies filters: EDGE, SHARPEN, BLUR, GAUSSIAN_BLUR.

Kernel and divisor created by ker_and_div.

Border pixels excluded to avoid invalid memory access.

Results normalized by divisor and clamped to.

Histogram (HISTOGRAM)

For grayscale images only.

Displays intensity distribution as star-bar chart.

Number of bins is a power of 2 in.

Pixels grouped evenly into bins; bin size = (max_val + 1) / y.

Frequencies counted and normalized to user-specified max width.

Formulas:

Bin index = intensity / bin size

Display height = (bin frequency / max frequency) * max width

Histogram Equalization (EQUALIZE)

Enhances image contrast by redistributing intensities.

Computes initial histogram over.

Cumulative histogram calculated by summing frequencies.

Maps intensities with:

new value = (cumulative frequency / total pixels) * 255

Saving Images (SAVE)

Saves images in ASCII or binary formats.

Writes header: format, dimensions, max pixel value.

Outputs pixel matrix according to file format.

Technical Considerations

Input Buffer Clearing:
To handle incomplete or erroneous input, leftover characters in the input line are discarded:

while (getchar() != '\n');

Parsing Multiple Parameters:
sscanf is used to validate input parameters and detect extra characters:

if (sscanf(param, "%d %d %d %d %c", &x1, &y1, &x2, &y2, &c) == 4) {
// Coordinates are valid
}

Memory Management:
Old matrices are freed before allocating new ones to avoid leaks.

Format Handling:
Reads and writes differ between ASCII and binary image formats.

Main Function

Handles user commands and controls program flow.

Reads commands and their arguments.

Processes commands with no parameters (EXIT, SELECT ALL) immediately.

Invalid or incomplete commands trigger error messages.

Clears input buffer after each command to prevent input blocking.

Verifies all inputs and manages invalid cases separately.
